#!/bin/bash -e
# for safety reasons, abort on all errors -> "-e"
cd ~ # just to play it safe, we'll chdir to our own homedir
. ~/.gcs-x2go # now let's source the config file

[ -z "$SERVERNAME" ] && exit 1 # no server name? That's a hard error, so let's bail out
[ -z "$CHROOTDEBVERSION" ] && export CHROOTDEBVERSION="bullseye" # if no specific version has been requested, assume bullseye, as that is what google uses at the moment

export DEBIAN_FRONTEND=noninteractive # make sure apt and debconf don't bug us with interactive popups during our scripted install
export HOMEDIR_ROOT=~/$SERVERNAME-home # the home directory for our server goes into a subdirectory of our own home directory, to make it persistent
# (also, putting it in a separate directory and bind-mounting it later on will allow us to query how much of our storage capacity is available, even from inside the changeroot environment)

if [ "$SERVER_USE_ROOT" = "true" ] ; then # not using / will make the actual server persistent as well, and thus faster to spawn, but eats up more home directory space 
	export SERVERNAME="/$SERVERNAME"
	CHECKDIR="/"
else
	CHECKDIR="$(pwd)"
fi
sudo apt install debootstrap lsof -y # install debootstrap and lsof, in case they're not there yet

# make sure we can use the suid bit, run executables and access devices in our install location
MOUNTTOCHECK=$(df --output=source $CHECKDIR | grep "^/"  || true) # "or true" is needed because bash is called with -e
if [ -n "$MOUNTTOCHECK" ]; then # an empty string would indicate "overlay" or no match
	if mount | grep "^${MOUNTTOCHECK} " | grep -q nosuid ; then
		sudo mount -oremount,suid $MOUNTTOCHECK 
	fi
	if mount | grep "^${MOUNTTOCHECK} " | grep -q noexec ; then
		sudo mount -oremount,exec $MOUNTTOCHECK
	fi
	if mount | grep "^${MOUNTTOCHECK} " | grep -q nodev ; then
		sudo mount -oremount,dev $MOUNTTOCHECK
	fi
fi

sudo debootstrap $CHROOTDEBVERSION $SERVERNAME # and start the base install

# now we need some bindmounts or else certain things won't work inside the changeroot
sudo mount --bind /dev/pts $SERVERNAME/dev/pts
sudo mount --bind /dev/shm/ $SERVERNAME/dev/shm
sudo mount --bind /proc $SERVERNAME/proc
sudo mount --bind /sys $SERVERNAME/sys

sudo mkdir -p $HOMEDIR_ROOT/etc # this is for later on - at the end of this script, as well as everytime when stopping the server, we copy our config data from /etc (like shadow files) to the persistent homedir path

sudo mount --bind $HOMEDIR_ROOT $SERVERNAME/home # here goes our homedir bind mount 

sudo chroot $SERVERNAME passwd -l root # lock the root account's password so no one can mess with it before we're done

# prepare a sources.list for us, based on the one present in our host environment
awk ' $0 ~ /bullseye/ { print $0 " contrib non-free" }' /etc/apt/sources.list | grep 'debian\.org' | sudo tee $SERVERNAME/etc/apt/sources.list >/dev/null
if [ "$CHROOTDEBVERSION" = "bookworm" ]; then # replace bullseye with bookworm if requested
	sudo sed -e 's/bullseye/bookworm/g' -e's/non-free/non-free non-free-firmware/' -i $SERVERNAME/etc/apt/sources.list
fi

# we need to downgrade from https to http for a moment
sudo sed -e 's/https/http/g' -i.old $SERVERNAME/etc/apt/sources.list

# now let's make the new sources.list known to apt and pull in repo data
sudo chroot $SERVERNAME apt update 

# now let's preseed some packages
# FIXME TODO this should be part of ~/.gcs-x2go, at least we should offer an option to override our defaults there
echo 'keyboard-configuration  keyboard-configuration/model    select  Generic 105-key (Intl) PC' | sudo chroot $SERVERNAME debconf-set-selections
echo 'keyboard-configuration  keyboard-configuration/modelcode        string  pc105' | sudo chroot $SERVERNAME debconf-set-selections
echo 'keyboard-configuration  keyboard-configuration/xkb-keymap       select  de' | sudo chroot $SERVERNAME debconf-set-selections
echo 'keyboard-configuration  keyboard-configuration/variant  select  German' | sudo chroot $SERVERNAME debconf-set-selections
echo 'keyboard-configuration  keyboard-configuration/layout   select  German' | sudo chroot $SERVERNAME debconf-set-selections
echo 'locales locales/default_environment_locale      select  C.UTF-8' | sudo chroot $SERVERNAME debconf-set-selections
echo 'locales locales/locales_to_be_generated multiselect     de_DE.UTF-8 UTF-8, en_US.UTF-8 UTF-8' | sudo chroot $SERVERNAME debconf-set-selections

# first, we need to install ca-certificates, so apt won't complain about untrusted certs, and debian-archive-keyring, so it can check signatures
sudo chroot $SERVERNAME apt install ca-certificates debian-archive-keyring -d -y # fetch
sudo chroot $SERVERNAME apt install ca-certificates debian-archive-keyring -y # install
sudo chroot $SERVERNAME apt clean # this should be a no-op with apt (apt-get needed it), but it won't hurt

# at this moment, it should be possible to re-enable https sources
sudo mv $SERVERNAME/etc/apt/sources.list.old $SERVERNAME/etc/apt/sources.list

# now let's make the new sources.list known to apt and pull in repo data
sudo chroot $SERVERNAME apt update 

# now let's install locales, to make the STDERR messages about missing locale configuration stop
sudo chroot $SERVERNAME apt install locales -d -y # fetch
sudo chroot $SERVERNAME apt install locales -y # install
sudo chroot $SERVERNAME apt clean # this should be a no-op with apt (apt-get needed it), but it won't hurt

# now let's pull in all updates
sudo chroot $SERVERNAME apt dist-upgrade -d -y # fetch
sudo chroot $SERVERNAME apt upgrade -y # install first batch
sudo chroot $SERVERNAME apt dist-upgrade -y # install second batch
sudo chroot $SERVERNAME apt clean 

# and finally, let's install the packages needed for an average office desktop
sudo chroot $SERVERNAME apt install dirmngr evince firefox-esr less libreoffice mc net-tools openssh-server rsync screen sudo thunderbird tor vim xfce4 xfce4-terminal -d -y
sudo chroot $SERVERNAME apt install dirmngr evince firefox-esr less libreoffice mc net-tools openssh-server rsync screen sudo thunderbird tor vim xfce4 xfce4-terminal -y
sudo chroot $SERVERNAME apt clean

# To install X2Go's HTML5 client, we currently need to use the heuler (nightly) repository
if [ "$X2GOHTML5" = "true" ] && [ -z "$USEX2GOREPO" ]; then
	export USEX2GOREPO = heuler
	echo "WARNING: X2GOHTML5 set to true, but no X2Go repository was specified. Using X2Go's (not Debian's) heuler (nightly) repository."
	echo "WARNING: Explicitly set USEX2GOREPO in .gcs-x2go to get rid of this warning."
fi
# check if we are supposed to use X2Go packages from an external X2Go repository, rather than from the official Debian repository
if [ -n "$USEX2GOREPO" ]; then
	if [ "$USEX2GOREPO" = "stable" ]; then
		echo '# X2Go Repository (release builds)' | sudo tee $SERVERNAME/etc/apt/sources.list.d/x2go.list >/dev/null
		echo "deb http://packages.x2go.org/debian $CHROOTDEBVERSION extras main" | sudo tee -a $SERVERNAME/etc/apt/sources.list.d/x2go.list >/dev/null
		echo '# X2Go Repository (sources of release builds)' | sudo tee -a $SERVERNAME/etc/apt/sources.list.d/x2go.list >/dev/null
		echo "deb-src http://packages.x2go.org/debian $CHROOTDEBVERSION extras main" | sudo tee -a $SERVERNAME/etc/apt/sources.list.d/x2go.list >/dev/null
	else
		echo "# X2Go Repository ($USEX2GOREPO builds)" |sudo tee $SERVERNAME/etc/apt/sources.list.d/x2go.list >/dev/null
		echo "deb http://packages.x2go.org/debian $CHROOTDEBVERSION extras $USEX2GOREPO" | sudo tee -a $SERVERNAME/etc/apt/sources.list.d/x2go.list >/dev/null
		echo "# X2Go Repository (sources of $USEX2GOREPO builds)" | sudo tee -a $SERVERNAME/etc/apt/sources.list.d/x2go.list >/dev/null
		echo "deb-src http://packages.x2go.org/debian $CHROOTDEBVERSION extras $USEX2GOREPO" | sudo tee -a $SERVERNAME/etc/apt/sources.list.d/x2go.list >/dev/null
	fi
	# Since apt-key is deprecated, we avoid the chicken-and-egg problem of downloading unsecured files by using an https download for our keys
	sudo wget -O $SERVERNAME/etc/apt/trusted.gpg.d/x2go-signing-key.asc https://packages.x2go.org/pub.key
	sudo wget -O $SERVERNAME/etc/apt/trusted.gpg.d/x2go-signing-key-old.asc https://packages.x2go.org/debian-old-pub.key
	sudo chroot $SERVERNAME apt update
	# now apt should recognize our key, and we can use our own repo to install the keyring file.
	if sudo chroot $SERVERNAME apt install x2go-keyring ; then
		# once that's done, let's remove our temporary solution
		sudo rm $SERVERNAME/etc/apt/trusted.gpg.d/x2go-signing-key.asc
		sudo rm $SERVERNAME/etc/apt/trusted.gpg.d/x2go-signing-key-old.asc
	else
		# this may fail; in that case, we should not attempt to remove the key
		: # NOP
	fi
	# and run apt-update again
	sudo chroot $SERVERNAME apt update
fi
# now let's install x2goserver and x2goclient 
sudo chroot $SERVERNAME apt install x2goserver x2goserver-xsession x2goclient -d -y
sudo chroot $SERVERNAME apt install x2goserver x2goserver-xsession x2goclient -y
sudo chroot $SERVERNAME apt clean

# add the key for the appropriate Pale Moon repo for bullseye or bookworm, and add the repo too
if [ "$CHROOTDEBVERSION" = "bookworm" ]; then
	wget -qnv https://download.opensuse.org/repositories/home:stevenpusser/Debian_12/Release.key -O - | sudo chroot $SERVERNAME apt-key add -
	echo 'deb http://download.opensuse.org/repositories/home:/stevenpusser/Debian_12/ /' | sudo tee $SERVERNAME/etc/apt/sources.list.d/home:stevenpusser.list >/dev/null
else
	wget -qnv https://download.opensuse.org/repositories/home:stevenpusser/Debian_11/Release.key -O - | gpg --dearmor | sudo tee $SERVERNAME/etc/apt/trusted.gpg.d/home_stevenpusser.gpg > /dev/null
	echo 'deb http://download.opensuse.org/repositories/home:/stevenpusser/Debian_11/ /' | sudo tee $SERVERNAME/etc/apt/sources.list.d/home:stevenpusser.list >/dev/null

fi

# now update the sources.list info again
sudo chroot $SERVERNAME apt update

# if adding the Pale Moon repo worked, "palemoon" should now show up as an installable package
if sudo chroot $SERVERNAME apt search '^palemoon$' | grep -q palemoon ; then
	sudo chroot $SERVERNAME apt install palemoon -d -y # so let's fetch ...
	sudo chroot $SERVERNAME apt install palemoon -y # ... and install it
	sudo chroot $SERVERNAME apt clean
fi

sudo chroot $SERVERNAME useradd -m $USERNAME -s /bin/bash # create the first regular user account in our changeroot

# if we have SSH server keys and/or ssh client configuration data for root (known_hosts, authorized_keys, ...) stowed away from a previous run, reuse it
if [ -d $HOMEDIR_ROOT/etc/ssh/ ] ; then
	sudo cp -a $HOMEDIR_ROOT/etc/ssh/*_key* $SERVERNAME/etc/ssh/
else
	sudo mkdir -p $HOMEDIR_ROOT/etc/ssh
fi
if [ -d $HOMEDIR_ROOT/root/.ssh/ ] ; then
	sudo cp -a $HOMEDIR_ROOT/root/.ssh $SERVERNAME/root
else
	sudo mkdir -p $HOMEDIR_ROOT/root/.ssh
	sudo chmod 700 $HOMEDIR_ROOT/root/.ssh
fi

# we cannot blindly reuse the shadow file from a previous run, as the amount and sequence of user accounts may have changed
if [ -f $HOMEDIR_ROOT/etc/shadow ] ; then # but if we do have a backup ...
	sudo sed -e '/^root:/d' -i $SERVERNAME/etc/shadow # then let's delete the current root entry from the shadow file
	sudo grep '^root:' $HOMEDIR_ROOT/etc/shadow | sudo tee -a $SERVERNAME/etc/shadow >/dev/null # and replace it with the old one
	# note that this works fine for root, as root always has UID 0
else
	echo "Set password for root account:" # query for a root password if this is our first run
	while ! sudo chroot $SERVERNAME passwd ; do sleep 1; done # make sure to ask and ask again until a valid password has been set
fi

# now we'll repeat that procedure for the first regular user account
if [ -f $HOMEDIR_ROOT/etc/shadow ] && sudo grep -q "^$USERNAME:" $HOMEDIR_ROOT/etc/shadow ; then
	sudo sed -e "/^$USERNAME:/d" -i $SERVERNAME/etc/shadow
	sudo grep "^$USERNAME:" $HOMEDIR_ROOT/etc/shadow | sudo tee -a $SERVERNAME/etc/shadow >/dev/null
	# FIXME TODO note that while regular user accounts should always start at UID 1000, there is a slight chance of the UID being different
else
	echo "Set password for account '$USERNAME':" # again, if this is our first run, query for a user password
	while ! sudo chroot $SERVERNAME passwd $USERNAME; do sleep 1; done # and make sure it really has been set
	sudo chroot $SERVERNAME usermod -c "$USERREALNAME,,," $USERNAME # now add the user's real name (which is stored in the config file variable) via usermod
fi

if ! [ -f $HOMEDIR_ROOT/$USERNAME/.ssh/id_rsa_${SERVERNAME///} ]; then
	sudo chroot ${SERVERNAME} sudo -u $USERNAME mkdir -p /home/$USERNAME/.ssh
	sudo chroot ${SERVERNAME} sudo -u $USERNAME ssh-keygen -f /home/${USERNAME}/.ssh/id_rsa_${SERVERNAME///}
	sudo chroot ${SERVERNAME} cat /home/${USERNAME}/.ssh/id_rsa_${SERVERNAME///}.pub | sudo chroot ${SERVERNAME} tee -a /home/${USERNAME}/.ssh/authorized_keys >/dev/null
	sudo chroot ${SERVERNAME} chown -R ${USERNAME}: /home/${USERNAME}/.ssh
	sudo chroot ${SERVERNAME} chmod 700 /home/${USERNAME}/.ssh
	sudo chroot ${SERVERNAME} chmod 600 /home/${USERNAME}/.ssh/authorized_keys
fi


# now let's prepare the TOR hidden service
sudo rm -rf $SERVERNAME/var/lib/tor/hidden_services # delete this if it already exists, so we have a clean state
sudo chroot $SERVERNAME sudo -u debian-tor mkdir /var/lib/tor/hidden_services # this directory needs to be created with this particular user
# this needs to be added to the torrc file
echo '# Hidden Service SSH_Server' | sudo tee -a $SERVERNAME/etc/tor/torrc >/dev/null # header
echo 'HiddenServiceDir /var/lib/tor/hidden_services/SSH_server' | sudo tee -a $SERVERNAME/etc/tor/torrc >/dev/null # directory where the service config is created/stored
echo 'HiddenServicePort 222' | sudo tee -a $SERVERNAME/etc/tor/torrc >/dev/null # any other port than 22 will do (22 is in use on the host), let's stick with 222
# Version 2 is no longer supported, so we no longer set the following parameter, instead, we use the current default
#echo 'HiddenServiceVersion 3' | sudo tee -a $SERVERNAME/etc/tor/torrc >/dev/null # HiddenServices can be version 2 or version 3, version 2 has shorter URLs
echo 'HiddenServiceNonAnonymousMode 1' | sudo tee -a $SERVERNAME/etc/tor/torrc >/dev/null # our server doesn't have to be anonymous, so let's enable this ...
echo 'HiddenServiceSingleHopMode 1' | sudo tee -a $SERVERNAME/etc/tor/torrc >/dev/null # ... because it allows "Single Hop Mode" - actually, still 3 hops, but that's better than 6 hops
echo 'SocksPort 0' | sudo tee -a $SERVERNAME/etc/tor/torrc >/dev/null # a TOR node in Non-Anonymous Mode will refuse to start if it has a local Socks listener, so disable it
# Hmm, this doesn't seem to do what it is supposed to do, so let's deactivate it again
#sudo sed -e '/^ExitNode/d' -i $SERVERNAME/etc/tor/torrc >/dev/null # make sure we don't accidentally become an exit node, step 1
#echo 'ExitNode 0' | sudo tee -a $SERVERNAME/etc/tor/torrc >/dev/null # make sure we don't accidentally become an exit node, step 2

sudo chroot $SERVERNAME ln -sf /proc/mounts /etc/mtab # without an mtab file, X2Go complains when trying to suspend a session (even though fuse mountpoints don't work in a changeroot)

# final configuration for our SSH daemon inside the changeroot - make it listen on port 222 as 22 is already in use on the host, and force it to bind to 127.0.0.1 only, as we'll only connect via TOR/reverse SSH Tunnel
sudo sed -i -e 's/^#Port.*$/Port 222/g' -e 's/^#ListenAddress.*$/ListenAddress 127.0.0.1/' $SERVERNAME/etc/ssh/sshd_config

# This is the step where we start installing X2Go's HTML5 client packages, if requested by the user
if [ "$X2GOHTML5" = "true" ]; then
	sudo chroot $SERVERNAME apt install -y ssl-cert nginx spawn-fcgi fcgiwrap x2gohtmlclient x2goserver x2goserver-xsession x2goserver-x2gokdrive
	sudo chroot $SERVERNAME apt clean
	sudo sed -e 's/:80/:8081/' -e 's/:443/:8080/' -e 's/:8080 ssl/:8080/' -e '/ipv6only/d' -i $SERVERNAME/etc/nginx/sites-available/x2gohtmlclient-demo.conf 
	sudo ln -s /etc/nginx/sites-available/x2gohtmlclient-demo.conf $SERVERNAME/etc/nginx/sites-enabled/
	sudo sed -e 's/name="server" /name="server" value="127.0.0.1" /' -e 's/name="uname" /name="uname" value="'$USERNAME'"/' -i $SERVERNAME/usr/share/x2gohtmlclient/demo/index.html
	sudo sed -e "s/,  '-l', /, '-p 222', '-l', /" -i $SERVERNAME/usr/lib/cgi-bin/x2gorpc.cgi
	sudo rm $SERVERNAME/etc/nginx/sites-enabled/default
	sudo chroot $SERVERNAME update-rc.d nginx remove
	sudo chroot $SERVERNAME service nginx stop || true
	# this needs to be added to the torrc file
	echo '# Hidden Service Web_Server' | sudo tee -a $SERVERNAME/etc/tor/torrc >/dev/null # header
	echo 'HiddenServiceDir /var/lib/tor/hidden_services/Web_server' | sudo tee -a $SERVERNAME/etc/tor/torrc >/dev/null # directory where the service config is created/stored
	echo 'HiddenServicePort 8080' | sudo tee -a $SERVERNAME/etc/tor/torrc >/dev/null # note that you need to disable the python web server before being able to start nginx
fi

sudo umount $SERVERNAME/dev/pts $SERVERNAME/dev/shm $SERVERNAME/proc $SERVERNAME/sys $SERVERNAME/home # unmount our bindmounts to clean things up

# make sure window compositing in XFCE4 is disabled globally
echo '<?xml version="1.0" encoding="UTF-8"?>' | sudo tee $SERVERNAME/etc/xdg/xfce4/xfconf/xfce-perchannel-xml/xfwm4.xml >/dev/null
echo '' | sudo tee -a $SERVERNAME/etc/xdg/xfce4/xfconf/xfce-perchannel-xml/xfwm4.xml >/dev/null
echo '<channel name="xfwm4" version="1.0">' | sudo tee -a $SERVERNAME/etc/xdg/xfce4/xfconf/xfce-perchannel-xml/xfwm4.xml >/dev/null
echo '        <property name="general" type="empty">' | sudo tee -a $SERVERNAME/etc/xdg/xfce4/xfconf/xfce-perchannel-xml/xfwm4.xml >/dev/null
echo '	                <property name="use_compositing" type="bool" value="false"/>'| sudo tee -a $SERVERNAME/etc/xdg/xfce4/xfconf/xfce-perchannel-xml/xfwm4.xml >/dev/null
echo '			        </property>'| sudo tee -a $SERVERNAME/etc/xdg/xfce4/xfconf/xfce-perchannel-xml/xfwm4.xml >/dev/null
echo '				</channel>'| sudo tee -a $SERVERNAME/etc/xdg/xfce4/xfconf/xfce-perchannel-xml/xfwm4.xml >/dev/null

# we're basically done, so let's back up our configuration into the persistent directory
sudo cp -a $SERVERNAME/etc/ssh/*_key* $HOMEDIR_ROOT/etc/ssh/
sudo cp -a $SERVERNAME/etc/shadow $HOMEDIR_ROOT/etc/

echo "Installation complete."
