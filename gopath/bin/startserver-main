#!/bin/bash
cd ~ # just to play it safe, we'll chdir to our own homedir
. ~/.gcs-x2go # now let's source the config file

[ -z "$SERVERNAME" ] && exit 1 # no server name? That's a hard error, so let's bail out

export HOMEDIR_ROOT=~/$SERVERNAME-home

if [ "$SERVER_USE_ROOT" = "true" ] ; then # prepend / if server changeroot is in root directory
	export SERVERNAME="/$SERVERNAME"
	CHECKDIR="/"
else
	CHECKDIR="$(pwd)"
fi

# make sure we can use the suid bit, run executables and access devices in our install location
MOUNTTOCHECK=$(df --output=source $CHECKDIR | grep "^/"  || true) # "or true" is needed because bash is called with -e
if [ -n "$MOUNTTOCHECK" ]; then # an empty string would indicate "overlay" or no match
	if mount | grep "^${MOUNTTOCHECK} " | grep -q nosuid ; then
		sudo mount -oremount,suid $MOUNTTOCHECK 
	fi
	if mount | grep "^${MOUNTTOCHECK} " | grep -q noexec ; then
		sudo mount -oremount,exec $MOUNTTOCHECK
	fi
	if mount | grep "^${MOUNTTOCHECK} " | grep -q nodev ; then
		sudo mount -oremount,dev $MOUNTTOCHECK
	fi
fi

# check if lsof is installed, if not install it
if ! [ -x /usr/bin/lsof ]; then
	echo "lsof not found, installing ..."
	sudo apt update
	sudo apt install lsof
fi

# now we need some bindmounts or else certain things won't work inside the changeroot
sudo mount --bind /dev/pts $SERVERNAME/dev/pts
sudo mount --bind /dev/shm/ $SERVERNAME/dev/shm
sudo mount --bind /proc $SERVERNAME/proc
sudo mount --bind /sys $SERVERNAME/sys
sudo mount --bind $HOMEDIR_ROOT $SERVERNAME/home # here goes our homedir bind mount 
# (putting it in a separate directory and bind-mounting it allows us to query how much of our storage capacity is available, even from inside the changeroot environment)

# restore configuration that was backed up by createserver or stopserver
sudo mkdir -p $HOMEDIR_ROOT/etc/ssh/ $HOMEDIR_ROOT/root/.ssh/ 
sudo cp -a $HOMEDIR_ROOT/etc/shadow $SERVERNAME/etc/
sudo cp -a $HOMEDIR_ROOT/etc/ssh/*_key* $SERVERNAME/etc/ssh/
sudo cp -a $HOMEDIR_ROOT/root/.ssh $SERVERNAME/root/
sudo cp -a $HOMEDIR_ROOT/var/lib/tor/hidden_services $SERVERNAME/var/lib/tor/
sudo chroot $SERVERNAME chown -R debian-tor: /var/lib/tor/hidden_services # this directory and its contents need to be owned by this particular user

sudo chroot $SERVERNAME service ssh start # start ssh server, as we need SSHd both for TOR and for the reverse SSH tunnel
